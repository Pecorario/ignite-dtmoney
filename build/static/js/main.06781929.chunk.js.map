{"version":3,"sources":["assets/income.svg","assets/outcome.svg","assets/total.svg","services/api.ts","hooks/useTransactions.tsx","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","form","TransactionTypeContainer","colors","red","green","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06781929.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import axios from 'axios';\n\nexport const api = axios.create({\n  baseURL: 'http://localhost:3000/api',\n})","import {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState\n} from 'react';\nimport { api } from '../services/api';\n\ninterface TransactionsContextData {\n  transactions: Transaction[];\n  createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n  {} as TransactionsContextData\n);\n\ninterface Transaction {\n  id: number;\n  title: string;\n  amount: number;\n  type: string;\n  category: string;\n  createdAt: string;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>; //herda todos os campos de Transaction, menos id e createdAt\n\ninterface TransactionsProviderProps {\n  children: ReactNode;\n}\n\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n  useEffect(() => {\n    api\n      .get('/transactions')\n      .then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  async function createTransaction(transactionInput: TransactionInput) {\n    const response = await api.post('/transactions', {\n      ...transactionInput,\n      createdAt: new Date()\n    });\n    const { transaction } = response.data;\n\n    setTransactions([...transactions, transaction]);\n  }\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n      {children}\n    </TransactionsContext.Provider>\n  );\n}\n\nexport function useTransactions() {\n  const context = useContext(TransactionsContext);\n\n  return context;\n}\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); //3 colunas de tamanhos iguais\n  gap: 2rem;\n  margin-top: -7rem;\n\n  div { \n    background: var(--shape);\n    padding: 1.5rem 2rem;\n    border-radius: 0.25rem;\n    color: var(--text-title);\n\n    header { \n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n\n    strong { \n      display: block; //strong vem por padrÃ£o com display inline, e no display inline o margin-top nao funciona\n      margin-top: 1rem;\n      font-size: 2rem;\n      font-weight: 500;\n      line-height: 3rem;\n    }\n\n    &.highlight-background {\n      background: var(--green);\n      color: #FFF;\n    }\n  }\n`;","import incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport totalImg from '../../assets/total.svg';\nimport { useTransactions } from '../../hooks/useTransactions';\n\nimport { Container } from './styles';\n\nexport function Summary() {\n  const { transactions } = useTransactions();\n\n  const summary = transactions.reduce(\n    (acc, transaction) => {\n      if (transaction.type === 'deposit') {\n        acc.deposits += transaction.amount;\n        acc.total += transaction.amount;\n      } else {\n        acc.withdraws += transaction.amount;\n        acc.total -= transaction.amount;\n      }\n\n      return acc;\n    },\n    {\n      deposits: 0,\n      withdraws: 0,\n      total: 0\n    }\n  );\n\n  return (\n    <Container>\n      <div>\n        <header>\n          <p>Entradas</p>\n          <img src={incomeImg} alt=\"Entradas\" />\n        </header>\n        <strong>\n          {new Intl.NumberFormat('pt-BR', {\n            style: 'currency',\n            currency: 'BRL'\n          }).format(summary.deposits)}\n        </strong>\n      </div>\n\n      <div>\n        <header>\n          <p>SaÃ­das</p>\n          <img src={outcomeImg} alt=\"SaÃ­das\" />\n        </header>\n        <strong>\n          -{' '}\n          {new Intl.NumberFormat('pt-BR', {\n            style: 'currency',\n            currency: 'BRL'\n          }).format(summary.withdraws)}\n        </strong>\n      </div>\n\n      <div className=\"highlight-background\">\n        <header>\n          <p>Total</p>\n          <img src={totalImg} alt=\"Total\" />\n        </header>\n        <strong>\n          {new Intl.NumberFormat('pt-BR', {\n            style: 'currency',\n            currency: 'BRL'\n          }).format(summary.total)}\n        </strong>\n      </div>\n    </Container>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-top: 4rem;\n\n  table {\n    width: 100%;\n    border-spacing: 0 0.5rem;\n\n    th {\n      color: var(--text-body);\n      font-weight: 400;\n      padding: 1rem 2rem;\n      text-align: left;\n      line-height: 1.5rem;\n    }\n\n    td {\n      padding: 1rem 2rem;\n      border: 0;\n      background: var(--shape);\n      color: var(--text-body);\n      border-radius: 0.25rem;\n\n      &:first-child {\n        color: var(--text-title);\n      }\n\n      &.deposit {\n        color: var(--green);\n      }\n\n      &.withdraw {\n        color: var(--red);\n      }\n    }\n  }\n`;\n","import { useTransactions } from '../../hooks/useTransactions';\nimport { Container } from './styles';\n\nexport function TransactionsTable() {\n  const { transactions } = useTransactions();\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>TÃ­tulo</th>\n            <th>Valor</th>\n            <th>Categoria</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {transactions.map(transaction => {\n            return (\n              <tr key={transaction.id}>\n                <td>{transaction.title}</td>\n                <td className={transaction.type}>\n                  {new Intl.NumberFormat('pt-BR', {\n                    //FORMATAR DATAS E VALORES EM REAIS E DATA BRASILEIRA\n                    style: 'currency',\n                    currency: 'BRL'\n                  }).format(transaction.amount)}\n                </td>\n                <td>{transaction.category}</td>\n                <td>\n                  {new Intl.DateTimeFormat('pt-BR').format(\n                    new Date(transaction.createdAt)\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </Container>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const Container = styled.main`\n  max-width: 1120px;\n  margin: 0 auto;\n  padding: 2.5rem 1rem;\n`;","import { Summary } from \"../Summary\";\nimport { TransactionsTable } from \"../TransactionsTable\";\nimport { Container } from \"./styles\";\n\nexport function Dashboard() {\n  return (\n    <Container>\n      <Summary />\n      <TransactionsTable />\n    </Container>\n  );\n}","export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from 'styled-components';\n\nexport const Container = styled.header`\n  background: var(--blue);\n`\n\nexport const Content = styled.div`\n  max-width: 1120px;\n  margin: 0 auto;\n\n  padding: 2rem 1rem 12rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    font-size: 1rem;\n    color: #fff;\n    background: var(--blue-light);\n    border: 0;\n    padding: 0 2rem;\n    border-radius: 0.25rem;\n    height: 3rem;\n    \n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`","import logoImg from '../../assets/logo.svg'\n\nimport { Container, Content } from './styles';\n\ninterface HeaderProps {\n  onOpenNewTransactionModal: () => void;\n}\n\nexport function Header ({ onOpenNewTransactionModal }: HeaderProps) {\n  return (\n    <Container>\n      <Content>\n        <img src={logoImg} alt=\"dt money\" />\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>\n          Nova transaÃ§Ã£o\n        </button>\n\n        \n      </Content>\n    </Container>\n  );\n}","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from 'styled-components';\nimport { darken, transparentize } from 'polished';\n\ninterface RadioBoxProps {\n  isActive: boolean;\n  activeColor: 'green' | 'red';\n}\n\nexport const Container = styled.form`\n  h2 {\n    color: var(--text-title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n  }\n\n  input {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    border-radius: 0.25rem;\n\n    border: 1px solid #d7d7d7;\n    background: #e7e9ee;\n\n    font-weight: 400;\n    font-size: 1rem;\n\n    &::placeholder {\n      color: var(--text-body);\n    }\n\n    & + input {\n      margin-top: 1rem;\n    }\n  }\n\n  button[type='submit'] {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    background: var(--green);\n    color: #fff;\n    border-radius: 0.25rem;\n    border: 0;\n    font-size: 1rem;\n    margin-top: 1.5rem;\n    font-weight: 600;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`;\n\nexport const TransactionTypeContainer = styled.div`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n`;\n\nconst colors = {\n  red: '#e52e4d',\n  green: '#33cc95'\n};\n\nexport const RadioBox = styled.button<RadioBoxProps>`\n  height: 4rem;\n  border: 1px solid #d7d7d7;\n  border-radius: 0.25rem;\n\n  background: ${props =>\n    props.isActive\n      ? transparentize(0.9, colors[props.activeColor])\n      : 'transparent'};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: border-color 0.2s;\n\n  &:hover {\n    border-color: ${darken(\n      0.1,\n      '#d7d7d7'\n    )}; //vai escurecer a cor da borda(#d7d7d7) em 10% (0.1)\n  }\n\n  img {\n    width: 20px;\n    height: 20px;\n  }\n\n  span {\n    display: inline-block; // para conseguir dar margem\n    margin-left: 1rem;\n    font-size: 1rem;\n    color: var(--text-title);\n  }\n`;\n","import { FormEvent, useState } from 'react';\nimport Modal from 'react-modal';\nimport closeImg from '../../assets/close.svg';\nimport incomeImg from '../../assets/income.svg';\nimport outcomeImg from '../../assets/outcome.svg';\nimport { useTransactions } from '../../hooks/useTransactions';\nimport { Container, TransactionTypeContainer, RadioBox } from './styles';\n\ninterface NewTransactionModalProps {\n  isOpen: boolean;\n  onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({\n  isOpen,\n  onRequestClose\n}: NewTransactionModalProps) {\n  const { createTransaction } = useTransactions();\n\n  const [title, setTitle] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [category, setCategory] = useState('');\n  const [type, setType] = useState('deposit');\n\n  async function handleCreateNewTransaction(event: FormEvent) {\n    event.preventDefault();\n\n    await createTransaction({\n      title,\n      amount,\n      category,\n      type\n    });\n\n    setTitle('');\n    setAmount(0);\n    setCategory('');\n    setType('deposit');\n    onRequestClose();\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      overlayClassName=\"react-modal-overlay\"\n      className=\"react-modal-content\"\n    >\n      <button\n        type=\"button\"\n        onClick={onRequestClose}\n        className=\"react-modal-close\"\n      >\n        <img src={closeImg} alt=\"Fechar modal\" />\n      </button>\n\n      <Container onSubmit={handleCreateNewTransaction}>\n        <h2>Cadastrar transaÃ§Ã£o</h2>\n\n        <input\n          placeholder=\"TÃ­tulo\"\n          value={title}\n          onChange={event => setTitle(event.target.value)}\n        />\n        <input\n          type=\"number\"\n          placeholder=\"Valor\"\n          value={amount}\n          onChange={event => setAmount(+event.target.value)}\n        />\n\n        <TransactionTypeContainer>\n          <RadioBox\n            type=\"button\"\n            onClick={() => setType('deposit')}\n            isActive={type === 'deposit'}\n            activeColor=\"green\"\n          >\n            <img src={incomeImg} alt=\"Entrada\" />\n            <span>Entrada</span>\n          </RadioBox>\n\n          <RadioBox\n            type=\"button\"\n            onClick={() => setType('withdraw')}\n            isActive={type === 'withdraw'}\n            activeColor=\"red\"\n          >\n            <img src={outcomeImg} alt=\"Entrada\" />\n            <span>SaÃ­da</span>\n          </RadioBox>\n        </TransactionTypeContainer>\n\n        <input\n          placeholder=\"Categoria\"\n          value={category}\n          onChange={event => setCategory(event.target.value)}\n        />\n\n        <button type=\"submit\">Cadastrar</button>\n      </Container>\n    </Modal>\n  );\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --red: #e52e4d;\n    --green: #33cc95;\n    --blue: #5429cc;\n\n    --blue-light: #6933ff;\n\n    --text-title: #363f5f;\n    --text-body: #969cb3;\n\n    --shape: #FFFFFF;\n    --background: #f0f2f5;\n  }\n\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html {\n    @media (max-width: 1080px) {\n      font-size: 93.75%; // 15px (1rem)\n    }\n\n    @media (max-width: 720px) {\n      font-size: 87.5%; //14px (1rem)\n    }\n  }\n\n  body {\n    background: var(--background);\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, textarea, button {\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  [disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .react-modal-overlay {\n    background: rgba(0, 0, 0, 0.5);\n\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .react-modal-content {\n    width: 100%;\n    max-width: 576px;\n    background: var(--background);\n    padding: 3rem;\n    position: relative;\n    border-radius: 0.24rem;\n  }\n\n  .react-modal-close {\n    position: absolute;\n    right: 1.5rem;\n    top: 1.5rem;\n    border: 0;\n    background: transparent;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.8);\n    }\n  }\n`","import { useState } from 'react';\nimport Modal from 'react-modal';\nimport { Dashboard } from './components/Dashboard';\nimport { Header } from './components/Header';\nimport { NewTransactionModal } from './components/NewTransactionModal';\n\nimport { GlobalStyle } from './styles/global';\nimport { TransactionsProvider } from './hooks/useTransactions';\n\nModal.setAppElement('#root');\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] =\n    useState(false);\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false);\n  }\n\n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n      <Dashboard />\n\n      <NewTransactionModal\n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createServer, Model } from 'miragejs';\nimport { App } from './App';\n\ncreateServer({\n  models: {\n    transaction: Model\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Freelance de website',\n          type: 'deposit',\n          category: 'Dev',\n          amount: 6000,\n          createdAt: new Date('2022-02-02 09:00:00')\n        },\n        {\n          id: 2,\n          title: 'Aluguel',\n          type: 'withdraw',\n          category: 'Casa',\n          amount: 1100,\n          createdAt: new Date('2022-02-25 11:00:00')\n        }\n      ]\n    });\n  },\n\n  routes() {\n    this.namespace = 'api';\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction');\n    });\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create('transaction', data);\n    });\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}